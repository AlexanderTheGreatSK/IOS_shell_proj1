#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

Help()
{
  echo "Usage: tradelog [-h|--help]"
  echo "       tradelog [FILTER ...] [COMMAND] [LOG [LOG2 [...]]"
  echo
  echo "COMMAND"
  echo "  list-tick     prints list of occurring stock symbols (tickers)"
  echo "  profit        prints total profit from closed positions"
  echo "  pos           prints list of values of currently held positions sorted in descending order by value"
  echo "  last-price    prints list of the last known price for each ticker"
  echo "  hist-ord      prints histogram of the number of transactions according to the ticker"
  echo "  graph-pos     prints graph of values of held positions according to the ticker"
  echo
  echo "FILTER"
  echo "  -a DATETIME   considered are only values of records after this date (without this date)"
  echo "                DATETIME is in format YYYY-MM-DD HH:MM:SS"
  echo
  echo "  -b DATETIME   considered are only values of records before this date (without this date)"
  echo "                DATETIME is in format YYYY-MM-DD HH:MM:SS"
  echo
  echo "  -t TICKER     considered are only entries corresponding to a given ticker. With multiple occurrences of this "
  echo "                switch, the set of all listed tickers are taken"
  echo
  echo "  -w WIDTH      sets width of graph, specified value sets length of the longest line."
  echo "                WIDTH must be unsigned integer."
  echo "                Multiple occurrences of this switch are not allowed, program will end with error"
  echo
}

Command_check() {
  if [ "$COMMAND" != "" ]; then
    echo "Error: Too many COMMAND arguments. Allowed is just one. Type ./tradelog -h for more help"
    exit 1
  fi
}

# DATUM A CAS;TICKER;TYP TRANSAKCE;JEDNOTKOVA CENA;MENA;OBJEM;ID <- one line in .csv log file

COMMAND=""
AFTER_DATE="0000-00-00 00:00:00"
BEFORE_DATE="9999-99-99 99:99:99"
WIDTH=-500
TICKER=""
TICKER_CNT=0
FILE_CNT=0
FILTER=false

LOG_FILES=""
GZ_LOG_FILES=""

while [ "$#" -gt 0 ]; do
    case $1 in
    -h | --help)
      Help
      exit 0
      ;;
    -a)
      #AFTER_DATE=$(date -d "$2" '+%Y-%m-%d %H:%M:%S')
      AFTER_DATE=$2
      FILTER=true
      shift
      shift
      ;;
    -b)
      #BEFORE_DATE=$(date -d "$2" '+%Y-%m-%d %H:%M:%S')
      BEFORE_DATE=$2
      FILTER=true
      shift
      shift
      ;;
    -w)
      if [ $WIDTH = -500 ]; then
        if [ "$2" -gt 0 ]; then
          WIDTH=$2
          FILTER=true
        else
          echo "-w argument must be positive number"
          exit 1
        fi

      else
        echo "Too many -w arguments."
        exit 1

      fi

      shift
      shift
      ;;
    -t)
      TICKER="$2 $TICKER"
      TICKER_CNT=$((TICKER_CNT+1))
      FILTER=true
      shift
      shift
      ;;
    list-tick)
      COMMAND="$1"
        shift
        ;;
    profit)
      Command_check
      COMMAND="$1"
      shift
      ;;
    pos)
      Command_check
      COMMAND="$1"
      shift
      ;;
    last-price)
      Command_check
      COMMAND="$1"
      shift
      ;;
    hist-ord)
      Command_check
      COMMAND="$1"
      shift
      ;;
    graph-pos)
      Command_check
      COMMAND="$1"
      shift
      ;;
    *)
      EXTENSION="${1##*.}"

      if [ "$EXTENSION" = "gz" ]; then
          GZ_LOG_FILES="$1 $GZ_LOG_FILES"
      elif [ "$EXTENSION" = "log" ]; then
          LOG_FILES="$1 $LOG_FILES"
      fi
      shift
      ;;
    esac
done

    if [ "$LOG_FILES" = "" ] && [ "$GZ_LOG_FILES" = "" ]; then

          LOG_FILES="-"

    fi


    TICKER=${TICKER%?}
    LOG_FILES=${LOG_FILES%?}
    #GZ_LOG_FILES=${GZ_LOG_FILES%?}



    if [ "$TICKER" != "" ]; then

        while [ $TICKER_CNT != 0 ]; do

            if [ $TICKER_CNT != 1 ]; then

                TMP=$(cut -d ' ' -f $TICKER_CNT "$TICKER")

            else
                TMP=$TICKER
            fi

            echo "$TMP"

            echo "$LOG_FILES:"

            CONTENT=$(cat $LOG_FILES)
            #CONTENT=$(gzcat "$GZ_LOG_FILES")
            #zcat
            echo "$GZ_LOG_FILES"



            FILTERED_LINES=$(cat $LOG_FILES | awk -F ';' -v t="$TMP" -v a="$AFTER_DATE" -v b="$BEFORE_DATE" 'a < $1 && b > $1 && $2 == t')


            TICKER_CNT=$((TICKER_CNT-1))

        done

    else

      FILTERED_LINES=$(cat $LOG_FILES | awk -F ';' -v a="$AFTER_DATE" -v b="$BEFORE_DATE" 'a < $1 && b > $1')

    fi

    case "$COMMAND" in
    "list-tick")
      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' -v a="$AFTER_DATE" -v b="$BEFORE_DATE" '{print $2}')
      echo "$FINAL"
      exit 0
      ;;
    "profit")

      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' -v a="$AFTER_DATE" -v b="$BEFORE_DATE" '{
      if ($3 == "buy") {
        sum=sum - $4 * $6
      } else if ($3 == "sell") {
        sum=sum + $4 * $6
      }
      };

      END {
        printf("%.2f", sum);
      }')
      echo "$FINAL"
      exit 0
      ;;
    "pos")

      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' -v a="$AFTER_DATE" -v b="$BEFORE_DATE" '{

        if (tickets[$2] == "") {
          if ($3 == "sell") {
            tickets[$2] = 0 - $6
            prices[$2] = tickets[$2] * $4
          } else if ("buy") {
            tickets[$2] = 0 + $6
            prices[$2] = tickets[$2] * $4
          }
        } else {
        if ($3 == "sell") {
            tickets[$2] = tickets[$2] - $6
            prices[$2] = tickets[$2] * $4
          } else if ("buy") {
            tickets[$2] = tickets[$2] + $6
            prices[$2] = tickets[$2] * $4
          }
        }

      };

      END {
        for (key in prices) {
          printf("%-10s: %11.2f\n",key ,prices[key]);
        }
      }')
      echo "$FINAL" | sort -t ':' -k 2,2 -n -r
      exit 0
      ;;

    "last-price")
      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' -v a="$AFTER_DATE" -v b="$BEFORE_DATE" '{

        tickets[$2] = $4

      };

      END {
        for (key in tickets) {
          printf("%-10s: %7.2f\n",key ,tickets[key]);
        }
      }')
      echo "$FINAL" | sort -t ':'
      exit 0
      ;;
    *)
      echo "$FILTERED_LINES"
      exit 0
      ;;
    esac


exit 0