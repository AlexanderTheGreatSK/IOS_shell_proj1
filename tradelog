#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

Help()
{
  echo "Usage: tradelog [-h|--help]"
  echo "       tradelog [FILTER ...] [COMMAND] [LOG [LOG2 [...]]"
  echo
  echo "COMMAND"
  echo "  list-tick     prints list of occurring stock symbols (tickers)"
  echo "  profit        prints total profit from closed positions"
  echo "  pos           prints list of values of currently held positions sorted in descending order by value"
  echo "  last-price    prints list of the last known price for each ticker"
  echo "  hist-ord      prints histogram of the number of transactions according to the ticker"
  echo "  graph-pos     prints graph of values of held positions according to the ticker"
  echo
  echo "FILTER"
  echo "  -a DATETIME   considered are only values of records after this date (without this date)"
  echo "                DATETIME is in format YYYY-MM-DD HH:MM:SS"
  echo
  echo "  -b DATETIME   considered are only values of records before this date (without this date)"
  echo "                DATETIME is in format YYYY-MM-DD HH:MM:SS"
  echo
  echo "  -t TICKER     considered are only entries corresponding to a given ticker. With multiple occurrences of this "
  echo "                switch, the set of all listed tickers are taken"
  echo
  echo "  -w WIDTH      sets width of graph, specified value sets length of the longest line."
  echo "                WIDTH must be unsigned integer."
  echo "                Multiple occurrences of this switch are not allowed, program will end with error"
  echo
}

Command_check() {
  if [ "$COMMAND" != "" ]; then
    echo "Error: Too many COMMAND arguments. Allowed is just one. Type ./tradelog -h for more help"
    exit 1
  fi
}

COMMAND=""
AFTER_DATE="0000-00-00 00:00:00"
BEFORE_DATE="9999-99-99 99:99:99"
WIDTH=-500
TICKER=""
LINES=""
TICKER_CNT=0

while [ "$#" -gt 0 ]; do
    case $1 in
    -h | --help)
      Help
      exit 0
      ;;
    -a)
      AFTER_DATE=$2
      shift
      shift
      ;;
    -b)
      BEFORE_DATE=$2
      shift
      shift
      ;;
    -w)
      if [ $WIDTH = -500 ]; then
        if [ "$2" -gt 0 ]; then
          WIDTH=$2
        else
          echo "-w argument must be positive number"
          exit 1
        fi

      else
        echo "Too many -w arguments."
        exit 1
      fi
      shift
      shift
      ;;
    -t)
      TICKER="$2 $TICKER"
      TICKER_CNT=$((TICKER_CNT+1))
      shift
      shift
      ;;
    list-tick)
      Command_check
      COMMAND="$1"
        shift
        ;;
    profit)
      Command_check
      COMMAND="$1"
      shift
      ;;
    pos)
      Command_check
      COMMAND="$1"
      shift
      ;;
    last-price)
      Command_check
      COMMAND="$1"
      shift
      ;;
    hist-ord)
      Command_check
      COMMAND="$1"
      shift
      ;;
    graph-pos)
      Command_check
      COMMAND="$1"
      shift
      ;;
    *)
      EXTENSION="${1##*.}"
      if [ "$EXTENSION" = "gz" ]; then
          LINES="$LINES\n"$(zcat "$1")
      elif [ "$EXTENSION" = "log" ]; then
          LINES="$LINES\n"$(cat "$1")
      fi
      shift
      ;;
    esac
done

    if [ "$LINES" = "" ]; then
          LINES=$(cat -)
    fi

    TICKER=${TICKER%?}
    FILTERED_LINES=""

    if [ "$TICKER" != "" ]; then

      if [ $TICKER_CNT -eq 1 ]; then
          FILTERED_LINES=$(echo "$LINES" | awk -F ';' -v t="$TICKER" -v a="$AFTER_DATE" -v b="$BEFORE_DATE" 'a < $1 && b > $1 && $2 == t')
      else
        FILTERED_LINES=$(echo "$LINES" | awk -F ';' -v t="$TICKER" -v cnt="$TICKER_CNT" -v s=' ' -v a="$AFTER_DATE" -v b="$BEFORE_DATE" 'BEGIN {
            split(t, array, s)
        };

        {
          if (a < $1 && b > $1) {
            for (i=1; i<=cnt; i++) {
                  if (array[i] == $2) {
                    print
                  }
            }
          }
        }')
      fi
    else
      FILTERED_LINES=$(echo "$LINES" | awk -F ';' -v a="$AFTER_DATE" -v b="$BEFORE_DATE" 'a < $1 && b > $1')
    fi

    case "$COMMAND" in
    "list-tick")
      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' '{print $2}' | sort -u)
      echo "$FINAL"
      exit 0
      ;;
    "profit")
      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' '{
      if ($3 == "buy") {
        sum=sum - $4 * $6
      } else if ($3 == "sell") {
        sum=sum + $4 * $6
      }
      };

      END {
        printf("%.2f", sum);
      }')
      echo "$FINAL"
      exit 0
      ;;
    "pos")

      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' '{

        if (tickets[$2] == "") {
          if ($3 == "sell") {
            tickets[$2] = 0 - $6
            prices[$2] = tickets[$2] * $4
          } else if ("buy") {
            tickets[$2] = 0 + $6
            prices[$2] = tickets[$2] * $4
          }
        } else {
        if ($3 == "sell") {
            tickets[$2] = tickets[$2] - $6
            prices[$2] = tickets[$2] * $4
          } else if ("buy") {
            tickets[$2] = tickets[$2] + $6
            prices[$2] = tickets[$2] * $4
          }
        }

      };

      END {
        for (key in prices) {
          printf("%-10s: %11.2f\n",key ,prices[key]);
        }
      }')
      echo "$FINAL" | sort -t ':' -k 2,2 -n -r
      exit 0
      ;;

    "last-price")
      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' '{
        tickets[$2] = $4
      };

      END {
        for (key in tickets) {
          printf("%-10s: %7.2f\n",key ,tickets[key]);
        }
      }')
      echo "$FINAL" | sort -t ':'
      exit 0
      ;;
    "hist-ord")
      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' -v w="$WIDTH" '{
          if (tickets[$2] == "") {
          tickets[$2]=1
        } else {
          tickets[$2]++
       }
      };

      END {
        if (w == -500) {
          for (key in tickets) {
          tmp="";
            for (i=0; i<tickets[key]; i++) {
              tmp=tmp"#"
            }
            printf("%-10s: %s\n",key ,tmp);
          }
        } else {
          max=""
          for (key in tickets) {
            if (max == "") {
              max=tickets[key]
            }

            if (max < tickets[key]) {
              max=tickets[key]
            }
          }

          oneHash=max/w

          for (key in tickets) {
            tmpStr=" "
            tmpInt=tickets[key]/oneHash
              for (i=0; i<int(tmpInt); i++) {
                tmpStr=tmpStr"#"
              }
            printf("%-10s:%s\n", key, tmpStr);
          }

        }
        }')
      echo "$FINAL" | sort -t ':'
    exit 0
    ;;
    "graph-pos")
      FINAL=$(echo "$FILTERED_LINES" | awk -F ';' -v w="$WIDTH" '{
          if (tickets[$2] == "") {
          if ($3 == "sell") {
            tickets[$2] = 0 - $6
            prices[$2] = tickets[$2] * $4
          } else if ("buy") {
            tickets[$2] = 0 + $6
            prices[$2] = tickets[$2] * $4
          }
        } else {
        if ($3 == "sell") {
            tickets[$2] = tickets[$2] - $6
            prices[$2] = tickets[$2] * $4
          } else if ("buy") {
            tickets[$2] = tickets[$2] + $6
            prices[$2] = tickets[$2] * $4
          }
        }

      };

      END {
        if (w == -500) {
          for (key in prices) {
            tmp="";
            if(prices[key] >= 0) {
              for (i = 1000; i<prices[key]; i+=1000) {
                tmp=tmp"#"
              }
            } else {
            tmpVal = sqrt(int(prices[key]*prices[key]))
            for (i = 1000; i<tmpVal; i+=1000) {
                tmp=tmp"!"
              }
            }
            printf("%-10s: %s\n",key ,tmp)
          }
        } else {
          max=""
          for(key in prices) {
            if(max == "") {
              max = sqrt(prices[key]*prices[key])
            } else {
                tmp=sqrt(prices[key]*prices[key])
                if (max < tmp) {
                  max=tmp
                }
            }
          }
          oneHash = max/w

          for (key in prices) {
            ch="#"
            if (int(prices[key]) < 0) {
              ch="!"

            }
            tmpInt=prices[key]/oneHash
            tmpInt=sqrt(tmpInt*tmpInt)
            tmpStr=""
            for (i = 0; i<int(tmpInt); i++) {
              tmpStr=tmpStr ch
            }
            if (tmpStr == "") {
              printf("%-10s:\n", key, tmpStr)
            } else {
              printf("%-10s: %s\n", key, tmpStr)
            }
          }
        }
      }')
      echo "$FINAL" | sort -t ':'
    exit 0
    ;;
    *)
      echo "$FILTERED_LINES"
      exit 0
      ;;
    esac
exit 0